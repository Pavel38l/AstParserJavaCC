/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. AstParser.jj */
/*@egen*//**
 * JavaCC - \u0420\u0451\u0421\u0403\u0420\u0457\u0420\u0455\u0420\u00bb\u0421\u040a\u0420\u00b7\u0421\u0453\u0420\u00b5\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u0491\u0420\u00bb\u0421\u040f \u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0420\u0451 \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u0455\u0420\u0406, \u0420\u0451\u0421\u0403\u0420\u0457\u0420\u0455\u0420\u00bb\u0421\u040a\u0420\u00b7\u0421\u0453\u0421\u040f \u0421\u040f\u0420\u00b7\u0421\u2039\u0420\u0454 \u0420\u0455\u0420\u0457\u0420\u0451\u0421\u0403\u0421\u2039\u0420\u0406\u0420\u00b0\u0421\u040b\u0421\u2030\u0420\u0451\u0420\u2116 \u0420\u0456\u0421\u0402\u0420\u00b0\u0420\u0458\u0420\u0458\u0420\u00b0\u0421\u201a\u0420\u0451\u0420\u0454\u0421\u0453
 * \u0420\u201d\u0420\u0455\u0420\u0454\u0421\u0453\u0420\u0458\u0420\u00b5\u0420\u0405\u0421\u201a\u0420\u00b0\u0421\u2020\u0420\u0451\u0421\u040f - https://javacc.github.io/javacc/
 * \u0420\u045f\u0421\u0402\u0420\u0451\u0420\u0458\u0420\u00b5\u0421\u0402\u0421\u2039 \u0420\u0451\u0421\u0403\u0420\u0457\u0420\u0455\u0420\u00bb\u0421\u040a\u0420\u00b7\u0420\u0455\u0420\u0406\u0420\u00b0\u0420\u0405\u0420\u0451\u0421\u040f JavaCC - https://javacc.github.io/javacc/tutorials/examples.html
 * \u0420\ufffd\u0421\u0403\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0405\u0421\u2039\u0420\u00b5 \u0420\u0454\u0420\u0455\u0420\u0491\u0421\u2039 \u0420\u0457\u0421\u0402\u0420\u0451\u0420\u0458\u0420\u00b5\u0421\u0402\u0420\u0455\u0420\u0406 \u0421\u0403 \u0420\u0457\u0420\u0455\u0421\u0403\u0421\u201a\u0420\u0455\u0421\u0402\u0420\u0455\u0420\u00b5\u0420\u0405\u0420\u0451\u0420\u00b5\u0420\u0458 AST \u0420\u0491\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u0406\u0420\u00b0, \u0420\u0451\u0421\u0403\u0420\u0457\u0420\u0455\u0420\u00bb\u0421\u040a\u0420\u00b7\u0421\u0453\u0421\u040f jjtree - \u0420\u0455\u0420\u0491\u0420\u0451\u0420\u0405 \u0420\u0451\u0420\u00b7 \u0421\u0403\u0420\u0454\u0421\u0402\u0420\u0451\u0420\u0457\u0421\u201a\u0420\u0455\u0420\u0406 JavaCC
 *
 * \u0420\u201d\u0420\u00bb\u0421\u040f \u0420\u0451\u0421\u0403\u0420\u0457\u0420\u0455\u0420\u00bb\u0421\u040a\u0420\u00b7\u0420\u0455\u0420\u0406\u0420\u00b0\u0420\u0405\u0420\u0451\u0421\u040f JavaCC \u0420\u0405\u0420\u00b5\u0420\u0455\u0420\u00b1\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0451\u0420\u0458\u0420\u00b0 \u0420\u00b5\u0420\u00b5 \u0421\u0453\u0421\u0403\u0421\u201a\u0420\u00b0\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u0454\u0420\u00b0
 * \u0420\u2022\u0421\u0403\u0421\u201a\u0421\u040a 2 \u0420\u0406\u0420\u00b0\u0421\u0402\u0420\u0451\u0420\u00b0\u0420\u0405\u0421\u201a\u0420\u00b0
 * 1. \u0420\u0408\u0421\u0403\u0421\u201a\u0420\u00b0\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u0454\u0420\u00b0 \u0420\u0406\u0421\u0402\u0421\u0453\u0421\u2021\u0420\u0405\u0421\u0453\u0421\u040b - \u0420\u0455\u0420\u0457\u0420\u0451\u0421\u0403\u0420\u00b0\u0420\u0405\u0420\u00b0 \u0420\u0406 \u0421\u0402\u0421\u0453\u0420\u0454\u0420\u0455\u0420\u0406\u0420\u0455\u0420\u0491\u0421\u0403\u0421\u201a\u0420\u0406\u0420\u00b5 https://javacc.github.io/javacc/#getting-started
 * \u0420\u2022\u0421\u0403\u0420\u00bb\u0420\u0451 \u0420\u0454\u0420\u0455\u0421\u0402\u0420\u0455\u0421\u201a\u0420\u0454\u0420\u0455 \u0420\u0405\u0421\u0453\u0420\u00b6\u0420\u0405\u0420\u0455 (\u0420\u0491\u0420\u00bb\u0421\u040f Windows):
 * \u0420\u040e\u0420\u0454\u0420\u00b0\u0421\u2021\u0420\u00b0\u0421\u201a\u0421\u040a \u0420\u0451\u0421\u0403\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0405\u0420\u0451\u0420\u0454\u0420\u0451(\u0420\u00b0\u0421\u0402\u0421\u2026\u0420\u0451\u0420\u0406) \u0420\u0451\u0420\u00b7 \u0421\u0402\u0421\u0453\u0420\u0454\u0420\u0455\u0420\u0406\u0420\u0455\u0420\u0491\u0421\u0403\u0421\u201a\u0420\u0406\u0420\u00b0
 * \u0420\u00a0\u0420\u00b0\u0421\u0403\u0420\u0457\u0420\u0455\u0420\u0454\u0420\u0455\u0420\u0406\u0420\u00b0\u0421\u201a\u0421\u040a \u0420\u0406 \u0420\u0457\u0420\u00b0\u0420\u0457\u0420\u0454\u0421\u0453 Java (\u0420\u0456\u0420\u0491\u0420\u00b5 \u0421\u0453\u0421\u0403\u0421\u201a\u0420\u00b0\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u00bb\u0420\u00b5\u0420\u0405\u0421\u2039 jdk \u0420\u0451 jre)
 * \u0420\u040e\u0420\u0454\u0420\u00b0\u0421\u2021\u0420\u00b0\u0421\u201a\u0421\u040a \u0420\u00b1\u0420\u0451\u0420\u0405\u0420\u00b0\u0421\u0402\u0420\u0405\u0421\u2039\u0420\u00b5 \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0421\u2039 (jar) \u0420\u0451\u0420\u00b7 \u0421\u0402\u0421\u0453\u0420\u0454\u0420\u0455\u0420\u0406\u0420\u0455\u0420\u0491\u0421\u0403\u0421\u201a\u0420\u0406\u0420\u0455
 * \u0420\u040e\u0420\u0455\u0420\u00b7\u0420\u0491\u0420\u00b0\u0421\u201a\u0421\u040a \u0420\u0406 \u0420\u0457\u0420\u00b0\u0420\u0457\u0420\u0454\u0420\u00b5 \u0420\u0451\u0420\u00b7 \u0420\u00b0\u0421\u0402\u0421\u2026\u0420\u0451\u0420\u0406\u0420\u00b0 \u0420\u0457\u0420\u00b0\u0420\u0457\u0420\u0454\u0421\u0453 target \u0420\u0451 \u0420\u0406\u0421\u0403\u0421\u201a\u0420\u00b0\u0420\u0406\u0420\u0451\u0421\u201a\u0421\u040a \u0421\u201a\u0421\u0453\u0420\u0491\u0420\u00b0 \u0420\u0491\u0420\u00b6\u0420\u00b0\u0421\u0402\u0420\u0405\u0420\u0451\u0420\u0454
 * \u0420\u201d\u0420\u0455\u0420\u00b1\u0420\u00b0\u0420\u0406\u0420\u0451\u0421\u201a\u0421\u040a \u0420\u0457\u0420\u00b0\u0420\u0457\u0420\u0454\u0421\u0453 scripts \u0420\u0406 Path \u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u0458\u0420\u00b5\u0420\u0405\u0421\u0453\u0421\u040b \u0420\u0455\u0420\u0454\u0421\u0402\u0421\u0453\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f Windows
 * \u0420\u045e\u0420\u0455\u0420\u0456\u0420\u0491\u0420\u00b0 \u0420\u0406 \u0420\u0454\u0420\u0455\u0420\u0458\u0420\u00b0\u0420\u0405\u0420\u0491\u0420\u0405\u0420\u0455\u0420\u2116 \u0421\u0403\u0421\u201a\u0421\u0402\u0420\u0455\u0420\u0454\u0420\u00b5 \u0420\u0491\u0420\u0455\u0420\u00bb\u0420\u00b6\u0420\u0405\u0421\u2039 \u0421\u0403\u0421\u201a\u0420\u00b0\u0421\u201a\u0421\u040a \u0420\u0491\u0420\u0455\u0421\u0403\u0421\u201a\u0421\u0453\u0420\u0457\u0420\u0405\u0421\u2039 \u0420\u0454\u0420\u0455\u0420\u0458\u0420\u0458\u0420\u00b0\u0420\u0405\u0420\u0491\u0421\u2039 javacc, jjtree, javac
 *
 * 2. \u0420\u045c\u0420\u00b0\u0421\u0403\u0421\u201a\u0421\u0402\u0420\u0455\u0420\u2116\u0420\u0454\u0420\u00b0 \u0421\u2021\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u00b7 Maven (\u0421\u0453 \u0420\u0458\u0420\u00b5\u0420\u0405\u0421\u040f \u0420\u0405\u0420\u00b5 \u0420\u0457\u0420\u0455\u0420\u00bb\u0421\u0453\u0421\u2021\u0420\u0451\u0420\u00bb\u0420\u0455\u0421\u0403\u0421\u040a)
 * \u0420\u0407 \u0420\u0491\u0421\u0453\u0420\u0458\u0420\u00b0\u0420\u00bb, \u0421\u2021\u0421\u201a\u0420\u0455 \u0420\u0458\u0420\u0455\u0420\u00b6\u0420\u0405\u0420\u0455 \u0421\u0453\u0421\u0403\u0421\u201a\u0420\u00b0\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u0451\u0421\u201a\u0421\u040a \u0420\u00b7\u0420\u00b0\u0420\u0406\u0420\u0451\u0421\u0403\u0420\u0451\u0420\u0458\u0420\u0455\u0421\u0403\u0421\u201a\u0421\u040a \u0420\u0451 maven \u0420\u0457\u0420\u00bb\u0420\u0455\u0420\u0456\u0420\u0451\u0420\u0405 \u0420\u0451 \u0420\u0406\u0421\u2039\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0421\u040f\u0421\u201a\u0421\u040a, \u0420\u0454\u0420\u0455\u0420\u0458\u0420\u00b0\u0420\u0405\u0420\u0491\u0421\u2039 \u0420\u0406\u0421\u2039\u0421\u20ac\u0420\u00b5 \u0420\u0454\u0420\u00b0\u0420\u0454 maven goals, \u0420\u0405\u0420\u0455 \u0420\u0405\u0420\u00b5 \u0421\u0403\u0421\u0402\u0420\u0455\u0421\u0403\u0420\u00bb\u0420\u0455\u0421\u0403\u0421\u040a
 * Maven \u0420\u00b7\u0420\u00b0\u0420\u0406\u0420\u0451\u0421\u0403\u0420\u0451\u0420\u0458\u0420\u0455\u0421\u0403\u0421\u201a\u0421\u040a - https://mvnrepository.com/artifact/net.java.dev.javacc/javacc
 * Maven \u0420\u0457\u0420\u00bb\u0420\u00b0\u0420\u0456\u0420\u0451\u0420\u0405 - https://github.com/phax/ph-javacc-maven-plugin
 * \u0420\u2019 \u0420\u0457\u0421\u0402\u0420\u0455\u0420\u00b5\u0420\u0454\u0421\u201a\u0420\u00b5 \u0420\u00b5\u0421\u0403\u0421\u201a\u0421\u040a \u0420\u0405\u0420\u00b5\u0421\u0453\u0420\u0491\u0420\u00b0\u0421\u2021\u0420\u0405\u0420\u00b0\u0421\u040f \u0420\u0457\u0420\u0455\u0420\u0457\u0421\u2039\u0421\u201a\u0420\u0454\u0420\u00b0 \u0421\u0403\u0420\u0454\u0420\u0455\u0420\u0405\u0421\u201e\u0420\u0451\u0420\u0456\u0421\u0453\u0421\u0402\u0420\u0451\u0421\u201a\u0421\u040a maven \u0420\u0457\u0420\u00bb\u0420\u00b0\u0420\u0456\u0420\u0451\u0420\u0405
 * \u0420\u2014\u0420\u00b0\u0421\u201a\u0420\u0455 \u0420\u0406 ItelliJ Idea \u0420\u00b5\u0421\u0403\u0421\u201a\u0421\u040a \u0420\u0457\u0420\u00bb\u0420\u00b0\u0420\u0456\u0420\u0451\u0420\u0405 \u0420\u0491\u0420\u00bb\u0421\u040f JavaCC \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0420\u0455\u0420\u0406 (*.jj, *.jjt)
 *
 *
 * \u0420\u2014\u0420\u00b0\u0420\u0457\u0421\u0453\u0421\u0403\u0420\u0454 \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u00b0
 * \u0420\u201d\u0420\u00bb\u0421\u040f \u0420\u00b7\u0420\u00b0\u0420\u0457\u0421\u0453\u0421\u0403\u0420\u0454\u0420\u00b0 \u0421\u0403\u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u0451\u0421\u0402\u0420\u0455\u0420\u0406\u0420\u00b0\u0420\u0405\u0420\u0405\u0420\u0455\u0420\u0456\u0420\u0455 \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u00b0 \u0420\u0405\u0420\u00b5 \u0421\u201a\u0421\u0402\u0420\u00b5\u0420\u00b1\u0421\u0453\u0420\u00b5\u0421\u201a\u0421\u0403\u0421\u040f javacc
 * \u0420\u045c\u0420\u00b5\u0420\u0455\u0420\u00b1\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0451\u0420\u0458\u0420\u0455 \u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u2116\u0421\u201a\u0420\u0451 \u0420\u0406 \u0420\u0457\u0420\u00b0\u0420\u0457\u0420\u0454\u0421\u0453 \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u00b0 \u0420\u0451 \u0420\u00b7\u0420\u00b0\u0420\u0457\u0421\u0453\u0421\u0403\u0421\u201a\u0420\u0451\u0421\u201a\u0421\u040a \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402
 * cd parser
 * java AstParser
 * \u0420\u2019 \u0420\u0491\u0420\u00b0\u0420\u0405\u0420\u0405\u0420\u0455\u0420\u0458 \u0421\u0403\u0420\u00bb\u0421\u0453\u0421\u2021\u0420\u00b0\u0420\u00b5 \u0420\u0406\u0420\u0406\u0420\u0455\u0420\u0491 \u0420\u0455\u0421\u0403\u0421\u0453\u0421\u2030\u0420\u00b5\u0421\u0403\u0421\u201a\u0420\u0406\u0420\u00bb\u0421\u040f\u0420\u00b5\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u0406 \u0420\u0454\u0420\u0455\u0420\u0405\u0421\u0403\u0420\u0455\u0420\u00bb\u0421\u040a ";" \u0421\u0403\u0420\u00bb\u0421\u0453\u0420\u00b6\u0420\u0451\u0421\u201a \u0420\u0455\u0420\u0454\u0420\u0455\u0420\u0405\u0421\u2021\u0420\u00b0\u0420\u0405\u0420\u0451\u0420\u00b5\u0420\u0458 \u0420\u0406\u0420\u0406\u0420\u0455\u0420\u0491\u0420\u00b0
 * \u0420\u201d\u0420\u00bb\u0421\u040f \u0421\u0402\u0420\u00b0\u0420\u00b7\u0420\u00b1\u0420\u0455\u0421\u0402\u0420\u00b0 \u0420\u0457\u0421\u0402\u0420\u0455\u0420\u0456\u0421\u0402\u0420\u00b0\u0420\u0458\u0420\u0458\u0421\u2039 \u0420\u0451\u0420\u00b7 \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0420\u00b0
 * java AstParser < ../input (../input - \u0420\u0457\u0421\u0453\u0421\u201a\u0421\u040a \u0420\u0454 \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0421\u0453)
 *
 * \u0420\u201c\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0421\u040f \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u00b0 (\u0420\u0457\u0421\u0402\u0420\u0451 \u0420\u0451\u0420\u00b7\u0420\u0458\u0420\u00b5\u0420\u0405\u0420\u00b5\u0420\u0405\u0420\u00b5\u0420\u0405\u0420\u0451\u0420\u0451 \u0420\u0451\u0420\u00bb\u0420\u0451 \u0421\u0403 \u0420\u0405\u0421\u0453\u0420\u00bb\u0421\u040f)
 * \u0420\u201d\u0420\u00bb\u0421\u040f \u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0420\u0451 \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u00b0 \u0420\u0457\u0420\u0455 \u0420\u0457\u0421\u0402\u0420\u00b0\u0420\u0406\u0420\u0451\u0420\u00bb\u0420\u00b0\u0420\u0458 \u0420\u0455\u0420\u0457\u0420\u0451\u0421\u0403\u0420\u00b0\u0420\u0405\u0420\u0405\u0421\u2039\u0420\u0458 \u0420\u0406 AstParser.jjt \u0420\u0405\u0421\u0453\u0420\u00b6\u0420\u0405\u0420\u0455
 * \u0420\u045f\u0421\u0402\u0420\u0451 \u0420\u0451\u0420\u00b7\u0420\u0458\u0420\u00b5\u0420\u0405\u0420\u00b5\u0420\u0405\u0420\u0451\u0420\u0451 \u0420\u0406 \u0421\u040c\u0421\u201a\u0420\u0455\u0420\u0458 \u0420\u0457\u0421\u0402\u0420\u0455\u0420\u00b5\u0420\u0454\u0421\u201a\u0420\u00b5:
 * -\u0420\u2019\u0421\u2039\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0420\u0451\u0421\u201a\u0421\u040a \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb generate-parser.bat, \u0421\u0403\u0420\u0455\u0421\u0403\u0421\u201a\u0420\u00b0\u0420\u0406\u0420\u00bb\u0420\u00b5\u0420\u0405\u0420\u0405\u0421\u2039\u0420\u2116 \u0420\u0491\u0420\u00bb\u0421\u040f \u0421\u040c\u0421\u201a\u0420\u0455\u0420\u0456\u0420\u0455 \u0420\u0457\u0421\u0402\u0420\u0455\u0420\u00b5\u0420\u0454\u0421\u201a\u0420\u00b0 (\u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u00b5\u0421\u0402\u0421\u0453\u0420\u00b5\u0421\u201a \u0420\u0451 \u0421\u0403\u0420\u0455\u0420\u00b1\u0420\u0451\u0421\u0402\u0420\u00b0\u0420\u00b5\u0421\u201a \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402 \u0420\u0406 \u0420\u0457\u0420\u00b0\u0420\u0457\u0420\u0454\u0420\u00b5 parser)
 * (\u0420\ufffd\u0420\u00bb\u0420\u0451 \u0420\u0406\u0421\u2039\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0420\u0451\u0421\u201a\u0421\u040a \u0420\u0406\u0421\u0403\u0420\u00b5 \u0420\u0454\u0420\u0455\u0420\u0458\u0420\u00b0\u0420\u0405\u0420\u0491\u0421\u2039 \u0420\u0405\u0420\u0451\u0420\u00b6\u0420\u00b5)
 * \u0420\u00a0\u0420\u00b0\u0421\u0403\u0421\u0403\u0420\u0458\u0420\u0455\u0421\u201a\u0421\u0402\u0420\u0451\u0420\u0458 \u0420\u0454\u0420\u0455\u0420\u0458\u0420\u00b0\u0420\u0405\u0420\u0491\u0421\u2039 \u0420\u0451\u0420\u00b7 \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0420\u00b0
 * jjtree src/main/java/AstParser.jjt - \u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u0451\u0421\u0402\u0421\u0453\u0420\u00b5\u0421\u201a \u0420\u0455\u0421\u0403\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u0405\u0421\u2039\u0420\u00b5 \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0421\u2039 \u0421\u0453\u0420\u00b7\u0420\u00bb\u0420\u0455\u0420\u0406 \u0420\u0451 \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb AstParser.jj
 * (\u0420\u0457\u0420\u00b0\u0420\u0457\u0420\u0454\u0420\u00b0 \u0420\u0491\u0420\u00bb\u0421\u040f \u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0420\u0451 \u0420\u00b7\u0420\u00b0\u0420\u0491\u0420\u00b0\u0420\u0405\u0420\u00b0 \u0420\u0406 AstParser.jjt)
 * javacc parser/AstParser.jj - \u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0421\u040f \u0420\u0455\u0421\u0403\u0421\u201a\u0420\u00b0\u0420\u0406\u0421\u20ac\u0420\u0451\u0421\u2026\u0421\u0403\u0421\u040f \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0420\u0455\u0420\u0406
 * javac parser/*.java - \u0420\u0454\u0420\u0455\u0420\u0458\u0420\u0457\u0420\u0451\u0420\u00bb\u0420\u0451\u0421\u0402\u0421\u0453\u0420\u00b5\u0421\u201a \u0420\u0406\u0421\u0403\u0420\u00b5 \u0420\u0451\u0421\u0403\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0405\u0420\u0451\u0420\u0454\u0420\u0451
 * \u0420\u045f\u0421\u0402\u0420\u0451 \u0421\u040c\u0421\u201a\u0420\u0455\u0420\u0458 \u0421\u2021\u0420\u00b0\u0421\u0403\u0421\u201a\u0421\u040a \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0420\u0455\u0420\u0406: AstIdent.java, AstValue.java, AstOperator.java \u0420\u0405\u0420\u00b0\u0420\u0457\u0420\u0451\u0421\u0403\u0420\u00b0\u0420\u0405\u0421\u2039 \u0420\u0406\u0421\u0402\u0421\u0453\u0421\u2021\u0420\u0405\u0421\u0453\u0421\u040b
 * \u0420\u045f\u0420\u0455\u0421\u040c\u0421\u201a\u0420\u0455\u0420\u0458\u0421\u0453 \u0420\u0457\u0421\u0402\u0420\u0451 \u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0420\u0451 \u0421\u0403 \u0420\u0405\u0421\u0453\u0420\u00bb\u0421\u040f \u0420\u0405\u0421\u0453\u0420\u00b6\u0420\u0405\u0420\u0455 \u0421\u0403\u0420\u0454\u0420\u0455\u0420\u0457\u0420\u0451\u0421\u0402\u0420\u0455\u0420\u0406\u0420\u00b0\u0421\u201a\u0421\u040a \u0421\u040c\u0421\u201a\u0420\u0451 \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0421\u2039 \u0420\u0406 \u0420\u0405\u0420\u00b5\u0420\u0455\u0420\u00b1\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0451\u0420\u0458\u0421\u0453\u0421\u040b \u0420\u0457\u0420\u00b0\u0420\u0457\u0420\u0454\u0421\u0453
 */
options {
             
                          // \u0421\u040c\u0421\u201a\u0420\u0455 \u0420\u0455\u0420\u0457\u0421\u2020\u0420\u0451\u0421\u040f \u0420\u0457\u0420\u0455\u0420\u0491\u0420\u00b0\u0420\u0406\u0420\u00bb\u0421\u040f\u0420\u00b5\u0421\u201a \u0420\u0406\u0421\u2039\u0421\u0402\u0420\u00b0\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f, \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0420\u0491\u0420\u00bb\u0421\u040f \u0420\u0405\u0420\u0451\u0421\u2026 \u0421\u040f\u0420\u0406\u0420\u0405\u0420\u0455 \u0420\u0405\u0420\u00b5 \u0421\u0453\u0420\u0454\u0420\u00b0\u0420\u00b7\u0420\u00b0\u0420\u0405\u0420\u0455 \u0420\u0451\u0420\u0458\u0421\u040f Ast \u0421\u0453\u0420\u00b7\u0420\u00bb\u0420\u00b0
  OUTPUT_DIRECTORY = "parser"; // \u0420\u00b7\u0420\u0491\u0420\u00b5\u0421\u0403\u0421\u040a \u0421\u0453\u0420\u0454\u0420\u00b0\u0420\u00b7\u0421\u2039\u0420\u0406\u0420\u00b0\u0420\u00b5\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u0454\u0421\u0453\u0420\u0491\u0420\u00b0 \u0420\u00b1\u0421\u0453\u0420\u0491\u0421\u0453\u0421\u201a \u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u0451\u0421\u0402\u0420\u0455\u0420\u0406\u0420\u00b0\u0421\u201a\u0421\u040a \u0421\u201e\u0420\u00b0\u0420\u2116\u0420\u00bb\u0421\u2039 \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u00b0
}

PARSER_BEGIN(AstParser)

/**
 * Simple Lang Ast parsing.
 \u0420\u201c\u0421\u0402\u0420\u00b0\u0420\u0458\u0420\u0458\u0420\u00b0\u0421\u201a\u0420\u0451\u0420\u0454\u0420\u00b0:
         num   -> <\u0421\u2021\u0420\u0451\u0421\u0403\u0420\u00bb\u0420\u0455>
         ident -> <\u0420\u0451\u0420\u0491\u0420\u00b5\u0420\u0405\u0421\u201a\u0420\u0451\u0421\u201e\u0420\u0451\u0420\u0454\u0420\u00b0\u0421\u201a\u0420\u0455\u0421\u0402>
         group -> num | ident | '(' add ')'
         mult  -> group (('*' | '/') group)*
         add   -> mult (('+' | '-') mult)*
         expr  -> 'input' ident | 'output' add | ident '=' add
         prog  -> expr*
         start -> prog
 */
// \u0420\u2014\u0420\u00b0\u0420\u0457\u0421\u0453\u0421\u0403\u0420\u0454 \u0420\u0457\u0420\u00b0\u0421\u0402\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u00b0
public class AstParser/*@bgen(jjtree)*/implements AstParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTAstParserState jjtree = new JJTAstParserState();

/*@egen*/
  /** Main entry point. */
  public static void main(String args[]) throws java.io.FileNotFoundException {
    System.out.println("Reading from standard input...");
    AstParser t = new AstParser(System.in);

    // Regad from file
    //java.io.InputStream fis = new java.io.FileInputStream("../input");
    //AstParser t = new AstParser(fis);
    try {
      ASTStart n = t.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}




PARSER_END(AstParser)

// \u0420\u2014\u0420\u0491\u0420\u00b5\u0421\u0403\u0421\u040a \u0421\u0453\u0420\u0454\u0420\u00b0\u0420\u00b7\u0421\u2039\u0420\u0406\u0420\u00b0\u0421\u040b\u0421\u201a\u0421\u040a\u0421\u0403\u0421\u040f \u0420\u0451\u0420\u0456\u0420\u0405\u0420\u0455\u0421\u0402\u0420\u0451\u0421\u0402\u0421\u0453\u0420\u00b5\u0420\u0458\u0421\u2039\u0420\u00b5 \u0420\u0406\u0421\u2039\u0421\u0402\u0420\u00b0\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> // \u0420\u0457\u0421\u0402\u0420\u0455\u0420\u0457\u0421\u0453\u0421\u0403\u0420\u0454 \u0420\u0454\u0420\u0455\u0420\u0458\u0420\u0458\u0420\u00b5\u0420\u0405\u0421\u201a\u0420\u00b0\u0421\u0402\u0420\u0451\u0420\u00b5\u0420\u0406
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// \u0420\u2014\u0420\u0491\u0420\u00b5\u0421\u0403\u0421\u040a \u0420\u0455\u0420\u00b1\u0421\u0409\u0421\u040f\u0420\u0406\u0420\u00bb\u0421\u040f\u0421\u040b\u0421\u201a\u0421\u040a\u0421\u0403\u0421\u040f \u0420\u0406\u0421\u0403\u0420\u00b5 \u0420\u00bb\u0420\u0451\u0421\u201a\u0420\u00b5\u0421\u0402\u0420\u00b0\u0420\u00bb\u0421\u2039 \u0420\u0451 \u0420\u0455\u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u201a\u0420\u0455\u0421\u0402\u0421\u2039 (\u0420\u0491\u0420\u00bb\u0421\u040f \u0421\u0453\u0420\u0491\u0420\u0455\u0420\u00b1\u0421\u0403\u0421\u201a\u0420\u0406\u0420\u00b0)
TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < INPUT: "input">
|
  < OUTPUT: "output">
|
 < ASSIGN: "=">
|
<SEMICOLON : ";">
|
<ADD: "+" | "-">
|
<MULT: "*" | "/" | "%">
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

/** \u0420\u2019\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0405\u0420\u00b0\u0421\u040f \u0421\u201a\u0420\u0455\u0421\u2021\u0420\u0454\u0420\u00b0. */
ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Program()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
\u0420\u2019\u0421\u0403\u0420\u00b5 \u0420\u0406\u0421\u2039\u0421\u0402\u0420\u00b0\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f \u0420\u0455\u0420\u00b1\u0421\u0409\u0421\u040f\u0420\u0406\u0420\u00bb\u0421\u040f\u0421\u040b\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u0406 \u0421\u201a\u0420\u00b0\u0420\u0454\u0420\u0455\u0420\u0458 \u0420\u0406\u0420\u0451\u0420\u0491\u0420\u00b5,
\u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0420\u0457\u0420\u0455\u0421\u0403\u0420\u00bb\u0420\u00b5 \u0420\u0451\u0420\u0458\u0420\u00b5\u0420\u0405\u0420\u0451 \u0420\u0406\u0421\u2039\u0421\u0402\u0420\u00b0\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f \u0420\u0405\u0420\u00b5 \u0421\u0453\u0420\u0454\u0420\u00b0\u0420\u00b7\u0420\u00b0\u0420\u0405\u0420\u0455 \u0420\u0451\u0420\u0458\u0421\u040f \u0421\u0453\u0420\u00b7\u0420\u00bb\u0420\u00b0 \u0420\u0455\u0420\u0405 \u0420\u0457\u0420\u0455\u0420\u0491\u0420\u00b0\u0420\u0406\u0420\u00bb\u0421\u040f\u0420\u00b5\u0421\u201a\u0421\u0403\u0421\u040f
*/
void Program() : {}
{
    ( Expression() )* // \u0420\u0457\u0421\u0402\u0420\u0455\u0420\u0456\u0421\u0402\u0420\u00b0\u0420\u0458\u0420\u0458\u0420\u00b0 \u0421\u0403\u0420\u0455\u0421\u0403\u0421\u201a\u0420\u0455\u0420\u0451\u0421\u201a \u0420\u0451\u0420\u00b7 \u0420\u00bb\u0421\u040b\u0420\u00b1\u0420\u0455\u0420\u0456\u0420\u0455 \u0420\u0454\u0420\u0455\u0420\u00bb\u0420\u0451\u0421\u2021\u0420\u00b5\u0421\u0403\u0421\u201a\u0420\u0406\u0420\u00b0 \u0420\u0406\u0421\u2039\u0421\u0402\u0420\u00b0\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0420\u2116
}

void Expression() : {}
{
    Input() | Output() | Assign()
}

/**
* \u0420\u2014\u0420\u0491\u0420\u00b5\u0421\u0403\u0421\u040a \u0420\u0455\u0420\u00b1\u0421\u0409\u0421\u040f\u0420\u0406\u0420\u00bb\u0420\u00b5\u0420\u0405\u0420\u0455 \u0420\u0451\u0420\u0458\u0421\u040f \u0420\u0454\u0420\u00bb\u0420\u00b0\u0421\u0403\u0421\u0403\u0420\u00b0 Ast \u0421\u0453\u0420\u00b7\u0420\u00bb\u0420\u00b0,
  \u0420\u0406 \u0420\u0491\u0420\u00b0\u0420\u0405\u0420\u0405\u0420\u0455\u0420\u0458 \u0421\u0403\u0420\u00bb\u0421\u0453\u0421\u2021\u0420\u00b0\u0420\u00b5, \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0420\u0454\u0420\u00bb\u0420\u00b0\u0421\u0403\u0421\u0403\u0420\u00b0 ASTAssign \u0420\u0405\u0420\u00b5\u0421\u201a, \u0420\u0455\u0420\u0405 \u0420\u00b1\u0421\u0453\u0420\u0491\u0420\u00b5\u0421\u201a \u0421\u0403\u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u0451\u0421\u0402\u0420\u0455\u0420\u0406\u0420\u00b0\u0420\u0405
*/
void Assign()         : {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
    try {
/*@egen*/
    Identifier() <ASSIGN> Add()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Input()        : {/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
      try {
/*@egen*/
      <INPUT> Identifier()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void Output()         : {/*@bgen(jjtree) Output */
  ASTOutput jjtn000 = new ASTOutput(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Output */
      try {
/*@egen*/
      <OUTPUT> Add()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

/** An Additive Expression.
* (>1) \u0420\u0455\u0420\u00b7\u0420\u0405\u0420\u00b0\u0421\u2021\u0420\u00b0\u0420\u00b5\u0421\u201a \u0421\u2021\u0421\u201a\u0420\u0455 \u0421\u0453\u0420\u00b7\u0420\u00b5\u0420\u00bb \u0420\u00b1\u0421\u0453\u0420\u0491\u0420\u00b5\u0421\u201a \u0420\u0457\u0420\u0455\u0420\u0491\u0420\u00b0\u0420\u0406\u0420\u00bb\u0421\u040f\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0421\u0453 \u0421\u0403\u0420\u00bb\u0420\u0455\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f \u0420\u0405\u0420\u00b5 \u0420\u00b1\u0421\u0453\u0420\u0491\u0420\u00b5\u0421\u201a 2 \u0420\u00b0\u0421\u0402\u0420\u0456\u0421\u0453\u0420\u0458\u0420\u00b5\u0420\u0405\u0421\u201a\u0420\u0455\u0420\u0406
*/
void Add()         : {/*@bgen(jjtree) #Add(> 1) */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Add(> 1) */
   try {
/*@egen*/
   Mult() ( AddOperation() Mult() )*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void AddOperation()          :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  t=<ADD>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setOperation(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** A Multiplicative Expression.
 * (>1) \u0420\u0455\u0420\u00b7\u0420\u0405\u0420\u00b0\u0421\u2021\u0420\u00b0\u0420\u00b5\u0421\u201a \u0421\u2021\u0421\u201a\u0420\u0455 \u0421\u0453\u0420\u00b7\u0420\u00b5\u0420\u00bb \u0420\u00b1\u0421\u0453\u0420\u0491\u0420\u00b5\u0421\u201a \u0420\u0457\u0420\u0455\u0420\u0491\u0420\u00b0\u0420\u0406\u0420\u00bb\u0421\u040f\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0421\u0453 \u0421\u0453\u0420\u0458\u0420\u0405\u0420\u0455\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f \u0420\u0405\u0420\u00b5 \u0420\u00b1\u0421\u0453\u0420\u0491\u0420\u00b5\u0421\u201a 2 \u0420\u00b0\u0421\u0402\u0420\u0456\u0421\u0453\u0420\u0458\u0420\u00b5\u0420\u0405\u0421\u201a\u0420\u0455\u0420\u0406
  */
void Mult()           : {/*@bgen(jjtree) #Mult(> 1) */
  ASTMult jjtn000 = new ASTMult(JJTMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Mult(> 1) */
  try {
/*@egen*/
  Group() ( MultOperation() Group() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

/**
* \u0420\u201d\u0420\u00bb\u0421\u040f \u0420\u0491\u0420\u00b0\u0420\u0405\u0420\u0405\u0420\u0455\u0420\u0456\u0420\u0455 \u0420\u0406\u0421\u2039\u0421\u0402\u0420\u00b0\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f \u0421\u0453\u0420\u00b7\u0420\u00b5\u0420\u00bb AST \u0420\u00b1\u0421\u2039\u0420\u00bb \u0420\u0405\u0420\u00b0\u0420\u0457\u0420\u0451\u0421\u0403\u0420\u00b0\u0420\u0405 \u0420\u0406\u0421\u0402\u0421\u0453\u0421\u2021\u0420\u0405\u0421\u0453\u0421\u040b, \u0420\u0457\u0420\u0455\u0421\u040c\u0421\u201a\u0420\u0455\u0420\u0458\u0421\u0453 \u0420\u0455\u0420\u0405 \u0420\u0405\u0420\u00b5 \u0420\u00b1\u0421\u0453\u0420\u0491\u0420\u00b5\u0421\u201a \u0421\u0403\u0420\u0456\u0420\u00b5\u0420\u0405\u0420\u00b5\u0421\u0402\u0420\u0451\u0421\u0402\u0420\u0455\u0420\u0406\u0420\u00b0\u0420\u0405.
  \u0420\u0408 \u0420\u0454\u0420\u00bb\u0420\u00b0\u0421\u0403\u0421\u0403\u0420\u00b0 \u0421\u0453\u0420\u00b7\u0420\u00bb\u0420\u00b0 ASTOperation \u0420\u00b5\u0421\u0403\u0421\u201a\u0421\u040a \u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u00b5 \u0420\u0455\u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0421\u040f \u0420\u0451 \u0421\u0403\u0420\u00b5\u0421\u201a\u0421\u201a\u0420\u00b5\u0421\u0402 \u0420\u0491\u0420\u00bb\u0421\u040f \u0420\u00b5\u0420\u0456\u0420\u0455 \u0421\u0453\u0421\u0403\u0421\u201a\u0420\u00b0\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u0454\u0420\u0451.
  \u0420\u2014\u0420\u0491\u0420\u00b5\u0421\u0403\u0421\u040a \u0420\u0406 \u0421\u0453\u0420\u00b7\u0420\u00b5\u0420\u00bb \u0421\u0403\u0420\u0455\u0421\u2026\u0421\u0402\u0420\u00b0\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a\u0421\u0403\u0421\u040f \u0421\u0403\u0420\u0451\u0420\u0458\u0420\u0406\u0420\u0455\u0420\u00bb \u0420\u0455\u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0420\u0451 \u0421\u0403\u0420\u00bb\u0420\u0455\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f (- \u0420\u0451\u0420\u00bb\u0420\u0451 +)
  \u0420\u045e\u0420\u00b0\u0420\u0454\u0420\u00b6\u0420\u00b5 \u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u0455\u0420\u0457\u0421\u0402\u0420\u00b5\u0420\u0491\u0420\u00b5\u0420\u00bb\u0420\u00b5\u0420\u0405 \u0420\u0458\u0420\u00b5\u0421\u201a\u0420\u0455\u0420\u0491 toString
*/
void MultOperation()          :
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  t=<MULT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setOperation(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Group() : {}
{
  "(" Add() ")" | Identifier() | Number()
}

/** \u0420\u2014\u0420\u0491\u0420\u00b5\u0421\u0403\u0421\u040a \u0420\u00b0\u0420\u0405\u0420\u00b0\u0420\u00bb\u0420\u0455\u0420\u0456\u0420\u0451\u0421\u2021\u0420\u0405\u0420\u0455 \u0421\u0403\u0420\u0455\u0421\u2026\u0421\u0402\u0420\u00b0\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u0451\u0420\u0458\u0421\u040f \u0420\u0451\u0420\u0491\u0420\u00b5\u0420\u0405\u0421\u201a\u0420\u0451\u0421\u201e\u0420\u0451\u0420\u0454\u0420\u00b0\u0421\u201a\u0420\u0455\u0421\u0402\u0420\u00b0  */
void Identifier()        :
{/*@bgen(jjtree) Ident */
  ASTIdent jjtn000 = new ASTIdent(JJTIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Ident */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** \u0420\u2014\u0420\u0491\u0420\u00b5\u0421\u0403\u0421\u040a \u0421\u0403\u0420\u0455\u0421\u2026\u0421\u0402\u0420\u00b0\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u00b7\u0420\u0405\u0420\u00b0\u0421\u2021\u0420\u00b5\u0420\u0405\u0420\u0451\u0420\u00b5 \u0421\u2021\u0420\u0451\u0421\u0403\u0420\u00bb\u0420\u00b0 */
void Number()        :
{/*@bgen(jjtree) Value */
 ASTValue jjtn000 = new ASTValue(JJTVALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
 }
{/*@bgen(jjtree) Value */
  try {
/*@egen*/
  t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}