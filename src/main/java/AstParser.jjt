options {
  MULTI=true;
  NODE_DEFAULT_VOID=true; // это опция подавляет выражения, если для них явно не указано имя Ast узла
}

PARSER_BEGIN(AstParser)

/**
 * Simple Lang Ast parsing.
 Грамматика:
         num   -> <число>
         ident -> <идентификатор>
         group -> num | ident | '(' add ')'
         mult  -> group (('*' | '/') group)*
         add   -> mult (('+' | '-') mult)*
         expr  -> 'input' ident | 'output' add | ident '=' add
         prog  -> expr*
         start -> prog
 */
// Запуск парсера
public class AstParser {
  /** Main entry point. */
  public static void main(String args[], String fileName) throws java.io.FileNotFoundException {
    //System.out.println("Reading from standard input...");
    //AstParser t = new AstParser(System.in);

    // Read from file
    java.io.InputStream fis = new java.io.FileInputStream(fileName);
    AstParser t = new AstParser(fis);
    try {
      ASTStart n = t.Start();
      AstDrawer astDrawer = new AstDrawer();
      astDrawer.draw(n);
      //n.dump("");
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}




PARSER_END(AstParser)

// Здесь указываються игнорируемые выражения
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> // пропуск комментариев
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// Здесь объявляються все литералы и операторы (для удобства)
TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < INPUT: "input">
|
  < OUTPUT: "output">
|
 < ASSIGN: "=">
|
<SEMICOLON : ";">
|
<ADD: "+" | "-">
|
<MULT: "*" | "/" | "%">
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

/** Входная точка. */
ASTStart Start() #Start : {}
{
  Program()
  { return jjtThis; }
}

/*
Все выражения объявляются в таком виде,
если после имени выражения не указано имя узла он подавляется
*/
void Program() : {}
{
    ( Expression() )* // программа состоит из любого количества выражений
}

void Expression() : {}
{
    Input() | Output() | Assign()
}

/**
* Здесь объявлено имя класса Ast узла,
  в данном случае, если класса ASTAssign нет, он будет сгенерирован
*/
void Assign() #Assign : {}
{
    Identifier() <ASSIGN> Add()
}

void Input() #Input : {}
{
      <INPUT> Identifier()
}

void Output() #Output : {}
{
      <OUTPUT> Add()
}

/** An Additive Expression.
* (>1) означает что узел будет подавлятся если у сложения не будет 2 аргументов
*/
void Add() #Add(>1): {}
{
   Mult() ( AddOperation() Mult() )*
}

/**
* Здесь в узел сохраняется символ операции сложения (- или +)
*/
void AddOperation() #Operator:
{
  Token t;
}
{
  t=<ADD>
  {
    jjtThis.jjtSetValue(t.image);
  }
}

/** A Multiplicative Expression.
 * (>1) означает что узел будет подавлятся если у умножения не будет 2 аргументов
  */
void Mult() #Multi(>1) : {}
{
  Group() ( MultOperation() Group() )*
}

/**
* Здесь в узел сохраняется символ операции умножения (* / %)
*/
void MultOperation() #Operator:
{
  Token t;
}
{
  t=<MULT>
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void Group() : {}
{
  "(" Add() ")" | Identifier() | Number()
}

/** Здесь аналогично сохраняется имя идентификатора  */
void Identifier() #Ident :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.jjtSetValue(t.image);
  }
}

/** Здесь сохраняется значение числа */
void Number() #Value :
{
 Token t;
 }
{
  t=<INTEGER_LITERAL>
  {
    jjtThis.jjtSetValue(t.image);
  }
}